#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pi;
vector<vector<pi> > graph;
void addedge(int x, int y, int cost)
{
graph[x].push_back(make_pair(cost, y));
graph[y].push_back(make_pair(cost, x));
}
void best_first_search(int source, int target, int n)
{
vector<bool> visited(n, false);
 priority_queue<pi, vector<pi>, greater<pi> > pq;
pq.push(make_pair(0, source));
n = true;
while (!pq.empty()) {
int x = pq.top().second;
cout << x << " ";
pq.pop();
if (x == target)
break;
for (int i = 0; i < graph[x].size(); i++) {
if (!visited[graph[x][i].second]) {
visited[graph[x][i].second] = true;
pq.push(graph[x][i]);
}
}
}
}
int main()
{
int v;
cout<<"Enter number of nodes ";
cin>>v;
graph.resize(v);
 int i;
 int x, y, cost;
cout<<"Enter Edges alnong with cost \n";
for (i=1; i<v; i++){
 cout<<"x, y , cost: ";
 cin>>x>>y>>cost;
addedge(x, y, cost);
}
int source ;
int target ;
 cout<<"Enter the source ";
 cin>>source;
 cout<<"Enter the target ";
 cin>>target;
best_first_search(source, target, v);
return 0;
}
